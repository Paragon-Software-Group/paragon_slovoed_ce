#ifndef _SDC_H_
#define _SDC_H_

#include "SldPlatform.h"

/** 

	@page Контейнер словарей.

	Словари имеют в своем составе разнородные данные, которые для удобства хранения, 
	распространения и обработки должны быть объединены в один файл который выступает 
	контейнером и обеспечивает поиск и доступ к нужным данным.

	Ранее в роли контейнера выступал формат PRC(Palm Resource Code: http://en.wikipedia.org/wiki/PRC_(Palm_OS))
	Однако он имел некоторые проблемы, которые мешают использовать его в дальнейшем:
	1) Ограничение размера ресурса в 64кБ
	2) Ограничено количество ресурсов - не более 65565 на один тип
	3) Структуры не выровнены по 4 байта, из-за чего требуются дополнительные действия при чтении
	4) Необходимость переворачивать данные при работе - не Intel(ARM,MIPS) порядок байт в машинном слове.
	5) Отсутствует контроль целостности файла(даже размера файла нет).

	Поэтому начиная с 2009 года начинается переход на новый контейнер, который будем называть 
	SDC(SlovoEd Data Container).

	Все данные разделенные будем называть ресурсами. Ресурсы могут иметь тип(дерево хафмана, 
	таблица сравнения, сжатые данные, заголовок словаря и т.д.) и номер(дерево хафмана 0, 
	дерево хафмана 1, ..., дерево хафмана 8). Номер у ресурса может быть любой и не обязательно 
	подряд с другими ресурсами того-же типа. Может быть множество ресурсов разных типов. 
	Может быть множество ресурсов разных номеров. Может быть множество ресурсов с одним номером 
	или типом, но не может быть ресурсов имеющих между собой одинаковые тип и номер.

	Структура контейнера будет аналогичной структуре PRC:
								\n
	[SDC Header]				\n
								\n
	[Resource record 0]			\n
	......						\n
	[Resource record N]			\n
								\n
	[Data]						\n

	В SDC Header находится заголовок контейнера, в котором хранится общая информация.
	Набор записей Resource record X - это записи с информацией о том, где находятся ресурсы.
	Data - собственно данные которые должны храниться в контейнере.
	Внимание! Собственно данные ресурсов идут в том-же порядке, что и записи в Resource record.
*/

/// Структура заголовка файла
typedef struct SlovoEdContainerHeader
{
	/// Сигнатура файла, должна быть "SLD2"
	UInt32	Signature;
	/// Размер структуры заголовка.
	UInt32	HeaderSize;
	/// Версия контейнера.
	UInt32	Version;
	/// Контрольная сумма для файла.
	UInt32	CRC;
	/// Размер файла.
	UInt32	FileSize;
	/// Идентификатор контейнера
	UInt32	DictID;
	/// Количество ресурсов в файле.
	UInt32	NumberOfResources;
	/// Размер структуры #SlovoEdContainerResourcePosition.
	/** нужно для случая, если нам потребуется создать словарь больше 4ГБ */
	UInt32	ResourceRecordSize;
	/// Тип содержимого контейнера (см. #ESlovoEdContainerDatabaseTypeEnum).
	UInt32	DatabaseType;
	/// Флаг, если не равен 0, значит записи в таблице ресурсов отсортированы:
	/// по типу ресурса, а внутри диапазона одного типа также и по номеру ресурса
	UInt32	IsResourceTableSorted;
	/// Количество дополнительных свойств базы
	UInt32 BaseAddPropertyCount;
	/// Флаг того, что это демо-база
	UInt32 IsInApp;
	/// Флаг, если не равен 0, значит есть имена ресурсов
	UInt8	IsResourcesHaveNames;
	/// Флаг, если не равен 0, значит в базе есть сжатые ресурсы
	UInt8	HasCompressedResources;
	// явное выравнивание до следующего UInt32
	UInt16	_pad0;
	/// Зарезервировано
	UInt32	Reserved[19];
}SlovoEdContainerHeader;

/// Структура описывающая местоположение ресурса.
typedef struct SlovoEdContainerResourcePosition
{
	/// Тип ресурса
	UInt32 Type;
	/// Индекс ресурса
	UInt32 Index;
	/// Размер ресурса
	// Старший бит используется как флаг сжатости ресурса, соответственно текущий
	// максимальный размер одного ресурса ограничен 2гб
	UInt32 Size;
	/// Смещение от начала файла до начала ресурса
	UInt32 Shift;
}SlovoEdContainerResourcePosition;

/// Тип алгоритма которым сжат ресурс
enum ESDCResourceCompressionType {
	/// Без сжатия
	eSDCResourceCompression_None = 0
};

/// Структура описывающая сжатый ресурс; хранится *перед* сжатыми данными ресурса
struct SlovoEdContainerCompressedResourceHeader
{
	/// Тип алгоритма которым сжат ресурс (см. #ESDCResourceCompressionType)
	UInt16 CompressionType;
	/// Выравнивание до следующего UInt32 (теоретически может использоваться для кастомизации
	/// хидера под разные алгоритмы сжатия)
	UInt16 _pad0;
	/// Размер ресурса в несжатом, оригинальном виде
	UInt32 UncompressedSize;
};

/// Размер строчки с дополнительными свойствами словаря
#define DEFAULT_PROPERTY_SIZE		256

/// Структура, описывающая дополнительные свойства базы
struct TBaseProperty
{
	/// Название свойства
	UInt16 PropertyName[DEFAULT_PROPERTY_SIZE];

	/// Описание свойства
	UInt16 Property[DEFAULT_PROPERTY_SIZE];
};

/// Номер текущей версии контейнера.
#define SDC_CURRENT_VERSION		(0x00000101)
/// Сигнатура контейнера - SLD2
#define SDC_SIGNATURE			('2DLS')

/// Перечисление ошибок работы с контейнером.
enum SDCError
{
	/// Нет ошибок.
	SDC_OK = 0,

	/// База для ошибок памяти.
	SDC_MEM_ERRORS = 0x0100,
	/// Передан нулевой указатель
	SDC_MEM_NULL_POINTER,
	/// Не хватает памяти
	SDC_MEM_NOT_ENOUGH_MEMORY,

	/// Ошибки класса отвечающего за запись
	SDC_WRITE_ERRORS = 0x0200,
	/// Пытались добавить пустой ресурс.
	SDC_WRITE_EMPTY_RESOURCE,
	/// Такой ресурс уже существует.
	SDC_WRITE_ALREADY_EXIST,
	/// Ошибка создания файла(открытия для записи)
	SDC_WRITE_CANT_CREATE_FILE,
	/// Ошибка записи файла.
	SDC_WRITE_CANT_WRITE,
	/// Ошибка сортировки таблицы ресурсов
	SDC_WRITE_CANT_SORT_RESOURCE_TABLE,

	/// Ошибки класса отвечающего за чтение.
	SDC_READ_ERRORS = 0x0300,
	/// Ошибка открытия файла.
	SDC_READ_CANT_OPEN_FILE,
	/// Не могу прочитать заданное количество данных.
	SDC_READ_CANT_READ,
	/// Не верная сигнатура, значит файл не в формате SDC!
	SDC_READ_WRONG_SIGNATURE,
	/// Не правильный номер ресурса
	SDC_READ_WRONG_INDEX,
	/// Не получается спозиционироваться согласно данным из таблицы смещений.
	SDC_READ_CANT_POSITIONING,
	/// Ресурс не найден
	SDC_READ_RESOURCE_NOT_FOUND,
	/// Контейнер не открыт
	SDC_READ_NOT_OPENED,
	/// Не верный размер файла
	SDC_READ_WRONG_FILESIZE,
	/// Ошибка контрольной суммы
	SDC_READ_WRONG_CRC,
	/// Не верный индекс свойства
	SDC_READ_WRONG_PROPERTY_INDEX

};

/// Структура описывающая данные считанного ресурса
typedef struct ResourceMemType
{
	/// Указатель на данные
	void	*ptr;

	/// Размер данных
	UInt32	Size;

	/// Тип ресурса
	UInt32	Type;

	/// Номер ресурса
	UInt32	Index;
}ResourceMemType;

#endif // _SDC_H_
