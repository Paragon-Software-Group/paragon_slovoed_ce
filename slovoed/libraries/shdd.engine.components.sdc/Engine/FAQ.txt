Р’ СЌС‚РѕРј С„Р°Р№Р»Рµ СЂР°Р·РјРµС‰РµРЅС‹ С‡Р°СЃС‚Рѕ Р·Р°РґР°РІР°РµРјС‹Рµ РІРѕРїСЂРѕСЃС‹, СЃРІСЏР·Р°РЅРЅС‹Рµ СЃ РёСЃРїРѕР»СЊР·РѕРІР°РЅРёРµРј СЏРґСЂР°.


1.	РљР°Рє СѓР·РЅР°С‚СЊ, С‡С‚Рѕ СЌС‚Рѕ Р·Р° СЃРїРёСЃРѕРє СЃР»РѕРІ? РљР°Рє РїРѕР»СѓС‡РёС‚СЊ РёРЅС„РѕСЂРјР°С†РёСЋ Рѕ РµРіРѕ СЃРІРѕР№СЃС‚РІР°С…?

Р”Р»СЏ С‚РѕРіРѕ, С‡С‚РѕР±С‹ СѓР·РЅР°С‚СЊ, С‡С‚Рѕ СЌС‚Рѕ Р·Р° СЃРїРёСЃРѕРє СЃР»РѕРІ, РЅСѓР¶РЅРѕ Р·Р°РїСЂРѕСЃРёС‚СЊ РёРЅС„РѕСЂРјР°С†РёСЋ Рѕ РµРіРѕ С‚РёРїРµ,
РёСЃРїРѕР»СЊР·СѓСЏ РјРµС‚РѕРґ РєР»Р°СЃСЃР° CSldListInfo: ESldError CSldListInfo::GetUsage(UInt32 *aUsage) const.

РџСЂРёРјРµСЂ:

const CSldListInfo* info = NULL;
UInt32 usage = 0;
ESldError error;

// РџРѕР»СѓС‡Р°РµРј РґР»СЏ СЃРїРёСЃРєР° СЃР»РѕРІ СЃ РЅРѕРјРµСЂРѕРј i СѓРєР°Р·Р°С‚РµР»СЊ РЅР° РєР»Р°СЃСЃ, СЃРѕРґРµСЂР¶Р°С‰РёР№ РµРіРѕ СЃРІРѕР№СЃС‚РІР°
error = dict->GetWordListInfo(i, &info);
if (error != eOK)
	return error;

// РџРѕР»СѓС‡Р°РµРј С‚РёРї СЃРїРёСЃРєР° СЃР»РѕРІ
error = info->GetUsage(&usage);
if (error != eOK)
	return error;
	
switch((EWordListTypeEnum)usage)
{
	case 	eWordListType_Dictionary:
		// Р­С‚Рѕ РїСЂРѕСЃС‚Рѕ СЃР»РѕРІР°СЂСЊ
		break;
	case	eWordListType_AdditionalInfo:
		// Р­С‚Рѕ СЃРїРёСЃРѕРє РґРѕРї. СЃС‚Р°С‚РµР№.
		break;
	case	eWordListType_Catalog:
		// Р­С‚Рѕ РєР°С‚Р°Р»РѕРі СЂР°Р·РіРѕРІРѕСЂРЅРёРєР°
		break;
	...
}



2.	РљР°Рє РїРѕР»СѓС‡РёС‚СЊ С‡Р°СЃС‚РёС‡РЅС‹Р№ РїРµСЂРµРІРѕРґ СЃС‚Р°С‚СЊРё? РљР°Рє РѕСЃС‚Р°РЅРѕРІРёС‚СЊ РїРµСЂРµРІРѕРґ СЃС‚Р°С‚СЊРё?

Р”Р»СЏ РѕСЃС‚Р°РЅРѕРІРєРё РїРµСЂРµРІРѕРґР° СЃС‚Р°С‚СЊРё РЅСѓР¶РЅРѕ, С‡С‚РѕР±С‹ РєР»Р°СЃСЃ CSldLayerAccessMy РІРµСЂРЅСѓР» РѕС€РёР±РєСѓ 
eExceptionTranslationPause. РџРѕСЃР»Рµ СЌС‚РѕРіРѕ РјРѕР¶РЅРѕ Р»РёР±Рѕ РїСЂРѕРґРѕР»Р¶РёС‚СЊ РїРµСЂРµРІРѕРґ СЃС‚Р°С‚СЊРё 
СЃ РїРѕРјРѕС‰СЊСЋ CSldDictionary::TranslateContinue(), Р»РёР±Рѕ Р·Р°РІРµСЂС€РёС‚СЊ РїРµСЂРµРІРѕРґ РІС‹Р·РѕРІРѕРј 
CSldDictionary::TranslateClear()

РќР°РїСЂРёРјРµСЂ:

ESldError error;

// СЌС‚РѕС‚ РІС‹Р·РѕРІ РїСЂРµСЂС‹РІР°РµС‚СЃСЏ РѕР±РѕР»РѕС‡РєРѕР№ СЃ РїРѕРјРѕС‰СЊСЋ eExceptionTranslationPause
// (РѕРЅ РѕР±СЂР°Р±Р°С‚С‹РІР°РµС‚СЃСЏ РѕС‚РґРµР»СЊРЅРѕ РѕС‚ РѕСЃС‚Р°Р»СЊРЅС‹С… РѕС€РёР±РѕРє Рё РЅРµ Р±СѓРґРµС‚ РІРѕР·РІСЂР°С‰РµРЅ)
error = dict->Translate(firstWordIndex, 0, eTranslationFull);
if (error != eOK)
	return error;

if (continueTranslation)
{
	dict->TranslateContinue(eTranslationFull);
}
else
{
	// Р—Р°РІРµСЂС€Р°РµРј РіРµРЅРµСЂР°С†РёСЋ html РІРµСЂСЃРёРё РїРµСЂРµРІРѕРґР°
	// (РµСЃР»Рё РЅСѓР¶РЅРѕ, С‚Рѕ РѕР±СЉРµРґРёРЅСЏРµРј РѕР±С‰РёРµ html С‚РµРіРё, РґРѕР±Р°РІР»СЏРµРј css СЃРµРєС†РёСЋ РёС‚Рґ)
	htmlBuilder->EndBuilding();

	error = dict->TranslateClear();
	if (error != eOK)
		return error;

	// РџРѕРґРіРѕС‚Р°РІР»РёРІР°РµРј htmlBuilder Рє РїРѕР»СѓС‡РµРЅРёСЋ РЅРѕРІРѕРіРѕ РїРµСЂРµРІРѕРґР°
	htmlBuilder->Prepare();

	error = dict->Translate(secondWordIndex, 0, eTranslationFull);
	if (error != eOK)
		return error;
}

htmlBuilder->EndBuilding();


РџСЂРё РѕСЃС‚Р°РЅРѕРІРєРµ РїРµСЂРµРІРѕРґР° СЃС‚РѕРёС‚ СѓС‡РµСЃС‚СЊ, С‡С‚Рѕ РїРµСЂРµРґР°РЅРЅС‹Р№ РІ С„СѓРЅРєС†РёСЋ СЃР±РѕСЂРєРё РїРµСЂРµРІРѕРґР° Р±Р»РѕРє 
СЃС‡РёС‚Р°РµС‚СЃСЏ РѕР±СЂР°Р±РѕС‚Р°РЅРЅС‹Рј: РµРіРѕ РЅСѓР¶РЅРѕ Р»РёР±Рѕ РґРѕР±Р°РІРёС‚СЊ Рё РїРѕС‚РѕРј РІРµСЂРЅСѓС‚СЊ eExceptionTranslationPause, 
Р»РёР±Рѕ, РµСЃР»Рё РґРѕР±Р°РІРёС‚СЊ РЅРµ РїРѕР»СѓС‡Р°РµС‚СЃСЏ (РЅР°РїСЂРёРјРµСЂ, РЅР°Рј РЅСѓР¶РµРЅ РєСЂР°С‚РєРёР№ РїРµСЂРµРІРѕРґ <100 СЃРёРјРІРѕР»РѕРІ, 
Р° РґР»РёРЅР° С‚РµРєСЃС‚Р° РІ Р±Р»РѕРєРµ 200), С‚Рѕ РЅСѓР¶РЅРѕ РѕР±СЂР°Р±РѕС‚Р°С‚СЊ С‚Р°РєРѕР№ СЃР»СѓС‡Р°Р№ РїРµСЂРµРґ РІС‹С…РѕРґРѕРј РёР· С„СѓРЅРєС†РёРё - 
СЃРѕС…СЂР°РЅРёС‚СЊ Р±Р»РѕРє/РёСЃРїРѕР»СЊР·РѕРІР°С‚СЊ С‡Р°СЃС‚РёС‡РЅРѕ/РёС‚Рґ

РўРѕ РµСЃС‚СЊ:

ESldError CSldLayerAccessMy::BuildTranslationRight(const CSldDictionary *aDictionary, const UInt16 *aText, ESldTranslationModeType aTree)
{
	...
	const CSldStyleInfo* StyleInfo = NULL;
	error = aDictionary->GetStyleInfo(aTree, &StyleInfo);
	if (error != eOK)
		return error;
		
	ESldStyleMetaTypeEnum TextType = StyleInfo->GetStyleMetaType();
	
	switch (TextType)
	{
		...
		// РЅСѓР¶РЅРѕ Р±С‹Р»Рѕ РїРѕР»СѓС‡РёС‚СЊ С‚РµРєСЃС‚ СЃС‚Р°С‚СЊРё РІРєР»СЋС‡Р°СЏ РїРµСЂРІСѓСЋ РѕР·РІСѓС‡РєСѓ
		case eMetaSound:
		{
			// РµСЃР»Рё Р±С‹ РЅСѓР¶РµРЅ Р±С‹Р» С‚РµРєСЃС‚ СЃС‚Р°С‚СЊРё Р±РµР· РїРµСЂРІРѕР№ РѕР·РІСѓС‡РєРё, С‚Рѕ
			// return eExceptionTranslationPause Р·РґРµСЃСЊ РґРµР»Р°С‚СЊ РЅРµР»СЊР·СЏ, РёРЅР°С‡Рµ Р·РІСѓРє РЅРµ РґРѕР±Р°РІРёС‚СЃСЏ, 
			// Р° РїСЂРё РїСЂРѕРґРѕР»Р¶РµРЅРёРё РїРµСЂРµРІРѕРґР° РїСЂРёРґРµС‚ СЃР»РµРґСѓСЋС‰РёР№ Р·Р° Р·РІСѓРєРѕРј Р±Р»РѕРє
			
			error = CSldMetadataParser::GetSoundMetadata(aText, &CloseFlag, &SoundIndex, SoundLang, &ExtDictId, &ExtListIdx, ExtKey);
			if (error != eOK)
				return error;
			
			// Р”РѕР±Р°РІР»СЏРµРј РѕР·РІСѓС‡РєСѓ
			m_pHtmlBuilder->AddSound(SoundIndex, aTree, CloseFlag, (const wchar_t*)SoundLang);
			
			// РїСЂРёРѕСЃС‚Р°РЅР°РІР»РёРІР°РµРј РїРµСЂРµРІРѕРґ
			return eExceptionTranslationPause;
		}
		...
	}
	
	return eOK;
}



3.	РќСѓР¶РЅРѕ Р»Рё СЌРєСЂР°РЅРёСЂРѕРІР°С‚СЊ СЃРїРµС†.СЃРёРјРІРѕР»С‹ РІ РїРѕРёСЃРєРѕРІС‹С… Р·Р°РїСЂРѕСЃР°С…?

Р’ РґРІСѓС… СЂРµР¶РёРјР°С… РїРѕРёСЃРєР° - РїРѕР»РЅРѕС‚РµРєСЃС‚РѕРІРѕРј (DoFullTextSearch) Рё РїРѕРёСЃРєРµ РїРѕ С€Р°Р±Р»РѕРЅСѓ (DoWildCardSearch) - РјРѕР¶РЅРѕ СЃРѕСЃС‚Р°РІР»СЏС‚СЊ Р»РѕРіРёС‡РµСЃРєРёРµ
РІС‹СЂР°Р¶РµРЅРёСЏ РёР· РѕРїРµСЂР°РЅРґРѕРІ:

- РІ СЃР»СѓС‡Р°Рµ РїРѕРёСЃРєР° РїРѕ С€Р°Р±Р»РѕРЅСѓ РґР»СЏ СЌС‚РѕРіРѕ РёСЃРїРѕР»СЊР·СѓСЋС‚СЃСЏ СЃРёРјРІРѕР»С‹ '&' (Р), '|' (РР›Р), '!' (РќР•), '*' (РїСЂРѕРёР·РІРѕР»СЊРЅРѕРµ РєРѕР»РёС‡РµСЃС‚РІРѕ СЃРёРјРІРѕР»РѕРІ),
'?' (СЂРѕРІРЅРѕ 1 СЃРёРјРІРѕР»), '(' Рё ')' (РґР»СЏ РіСЂСѓРїРїРёСЂРѕРІРєРё РѕРїРµСЂР°РЅРґРѕРІ); РґР»СЏ РєРѕСЂСЂРµРєС‚РЅРѕР№ РѕР±СЂР°Р±РѕС‚РєРё СЌС‚Рё СЃРёРјРІРѕР»С‹ РІ Р·Р°РїСЂРѕСЃРµ РЅСѓР¶РЅРѕ СЌРєСЂР°РЅРёСЂРѕРІР°С‚СЊ
СЃ РїРѕРјРѕС‰СЊСЋ '%' - СЌС‚Рѕ РјРѕР¶РЅРѕ СЃРґРµР»Р°С‚СЊ СЃ РїРѕРјРѕС‰СЊСЋ РІС‹Р·РѕРІР° PrepareQueryForWildCardSearch (РёР· SldAuxiliary.cpp), РЅР°РїСЂРёРјРµСЂ С‚Р°Рє:

...
UInt16* PreparedQuery = NULL;
error = PrepareQueryForWildCardSearch((const UInt16*)aTemplate.c_str(), m_pCurrentDictionary, ListIndex, NULL, &PreparedQuery);
if (error != eOK)
	return error;
	
error = m_pCurrentDictionary->DoWildCardSearch(PreparedQuery, aMaxWords);
sldMemFree(PreparedQuery);
return error;


- РІ СЃР»СѓС‡Р°Рµ РїРѕР»РЅРѕС‚РµРєСЃС‚РѕРІРѕРіРѕ РїРѕРёСЃРєР° РёСЃРїРѕР»СЊР·СѓСЋС‚СЃСЏ '&', '|', '!', '(' Рё ')';
РѕСЃС‚Р°Р»СЊРЅС‹Рµ СЃРёРјРІРѕР»С‹ (РІ С‚.С‡. '*' Рё '?') СЃС‡РёС‚Р°СЋС‚СЃСЏ РѕР±С‹С‡РЅС‹РјРё СЃРёРјРІРѕР»Р°РјРё Р°Р»С„Р°РІРёС‚Р°


Р’ РѕСЃС‚Р°Р»СЊРЅС‹С… СЂРµР¶РёРјР°С… РїРѕРёСЃРєР° (Fuzzy, Anagram, Spelling) СЃРїРµС†.СЃРёРјРІРѕР»С‹ СЃС‡РёС‚Р°СЋС‚СЃСЏ СЃРёРјРІРѕР»Р°РјРё Р°Р»С„Р°РІРёС‚Р°
