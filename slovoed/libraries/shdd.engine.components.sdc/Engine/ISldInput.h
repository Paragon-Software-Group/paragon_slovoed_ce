#ifndef _I_SLD_INPUT_H_
#define _I_SLD_INPUT_H_

#include "SldPlatform.h"
#include "SldError.h"
#include "SldUtil.h"

class CSDCReadMy;

/// Интерфейс класса отвечающего за получение данных для списка слов.
/** ********************************************************************
* Данный класс является интерфейсом для получения данных из источников
* хранящих данные в разном виде: чистый текст, сжатый с помощью Huffman'а,
* с использованием zlib и т.д.
************************************************************************/
class ISldInput
{
public:
	virtual ~ISldInput(void){};

	/// Инициализация
	/** ********************************************************************
	* Инициализация потока данных. 
	*
	* @param aData - ссылка на класс получения данных для последующей
	*				обработки в данном классе.
	* @param aDataType - тип ресурса с основными данными
	* @param aAssistType - тип ресурса с вспомогательными данными(например деревом Хаффмана)
	* @param aAssistCount - количество ресурсов с вспомогательными данными(например деревом Хаффмана)
	* @param aQAType - тип ресурса данными для быстрого поиска
	* @param aListVersion - номер версии списка слов, для статей передается 0
	*
	* @return код ошибки
	************************************************************************/
	virtual ESldError Init(CSDCReadMy &aData, UInt32 aDataType, UInt32 aAssistType, UInt32 aAssistCount, UInt32 aQAType, UInt32 aListVersion) = 0;

	/// Устанавливаем HASH для декодирования данного списка слов.
	/** ********************************************************************
	*  Устанавливаем HASH для декодирования данного списка слов.
	*
	* @param aHASH - HASH код для декодирования списка слов.
	************************************************************************/
	virtual void SetHASH(UInt32 aHASH) = 0;

	/// Получаем количество точек по которым может производится поиск
	virtual UInt32 GetSearchPointCount() = 0;

	/// Получаем текст для указанной точки
	/** ********************************************************************
	*  Получаем текст для указанной точки
	*
	* @param aPointIndex - номер точки поиска для которой мы хотим получить текст
	* @param aText - сюда поместим указатель на строчку с текстом
	*
	* @return код ошибки
	************************************************************************/
	virtual ESldError GetSearchPointText(UInt32 aPointIndex, const UInt16 **aText) = 0;
	/// Получаем номер слова для указанной точки
	/** ********************************************************************
	*  Получаем номер слова для указанной точки
	*
	* @param aPointIndex - номер точки поиска для которой мы хотим получить номер слова
	* @param aIndex - сюда поместим номер слова
	*
	* @return код ошибки
	************************************************************************/
	virtual ESldError GetSearchPointIndex(UInt32 aPointIndex, Int32 *aIndex) = 0;
	/// Получаем начало слова для указанной точки
	/** ********************************************************************
	*  Получаем начало слова для указанной точки
	*
	* @param aPointIndex - номер точки поиска для которой мы хотим получить номер слова
	* @param aWord - сюда поместим начало слова
	*
	* @return код ошибки
	************************************************************************/
	virtual ESldError GetSearchPointText(UInt32 aPointIndex, UInt16 *aWord) = 0;

	/// Производим переход внутреннего состояния в позицию точки из таблицы быстрого поиска.
	virtual ESldError GoTo(UInt32 aPointIndex) = 0;

	/// Производит получение текста(вплоть до терминирующего 0).
	virtual ESldError GetText(UInt32 aDataType, sld2::Span<UInt16> aBuffer, UInt32 *aLength = nullptr) = 0;

	/// Производит получение данных, до 32 бит.
	virtual ESldError GetData(UInt32 *aDataBuffer, UInt32 aDataSize) = 0;

	/// Возвращает текущее положение в битах.
	virtual UInt32 GetCurrentPosition() = 0;

	/// Перемещаем указатель текущей позиции чтения в указанную позицию
	virtual ESldError SetCurrentPosition(UInt32 aShift) = 0;
};

#endif
